Changelog for version 4.0:

- the build scrips compile both shared (dynamic) and static libraries

- added C-interface, the library compiles C++ and C functions and 
  TasmanianSparseGrids.h header defines the C interface that is based 
  on a void-pointer that holds an instance of the C++ class

- added Python module interface based on ctypes and the C interface. 
  The Python module is called TasmanianSG.py and it defines the TasmanianSparseGrids 
  python class which mimics closely the C++ class with enumerates replaced by strings
  The Python module raises TasmanianInputError exception on incorrect input

- support for cmake, starting with version 4.0 cmake is the preffered build system
  the simple GNU-Make will continue to be supported.
  
  Example cmake call (Linux):

  cd /home/myself/TasmanianBuild
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/home/myself/TSG \
    -DENABLE_PYTHON=ON \
    -DENABLE_MATLAB=ON \
    -DMATLAB_WORK_FOLDER=/home/miro/RAM/tsgWorkFiles/ \
    -DENABLE_OPENMP=ON \
    /home/myself/TasmanianSparseGrids/
  make
  make test
  make install

- in the above example, add the following to .bashrc
  in order to use tasgrid executable:
    export PATH=$PATH:/home/myself/TSG/bin

  in order to use tasgrid shared library:
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/myself/TSG/lib

  in order to compile C or C++ code:
    export C_INCLUDE_PATH=$C_INCLUDE_PATH:/home/myself/TSG/include
    export CPP_INCLUDE_PATH=$CPP_INCLUDE_PATH:/home/myself/TSG/include

  alternatively you can add -I/home/myself/TSG/include to your build command

- in the above example, the python module will be installed under
    /home/myself/TSG/python/TasmanianSG.py
    in your python script use:

    import sys
    sys.path.append("/home/myself/TSG/python")
    import TasmanianSG

- in the above example, the MATLAB files will be installed under
    /home/myself/TSG/matlab/

    in MATLAB use:
    addpath("/home/myself/TSG/matlab/")

    or add the path using the MATLAB gui

- added piece-wise constant polynomial rule

- added functions to directly evaluate hierarhical functions for piece-wise
  polynomial, wavelet, and sequence grids. Also, the hierarchical surpluses
  associated with those functions can be overwritten. This functionality is
  useful in constructing a grid that is the result of a projection of an 
  arbitrary data set, as opposed to interpolaiton at pre-defined nodes.
  However, the functionality currently intrudes into the data structures and
  is hence to fully complient with the rest of the workflow and codeflow, thus
  the functions are to be considered "experimental" and to be used with lots of
  caution.

- fixed various small bugs


Changelog for version 3.1:

- fixed a major bug when using the tasgrid executable, TasmanianSparseGrid::write, and TasmanianSparseGrid::read funcitons
  the custom domain transform was not saved properly
  using grid files saved with version 3.0 will generate some warning, but it will work fine otherwise (except for the custom transfrom)

- added example CC, COMPILE_OPTIONS, and OPTC Makefile directives for clang + OpenMP as well as Intel icc compilers

- added a windows bat script that mimics the make command but is compatible with Microsoft Visual C++

- changed the signature of 
   TasmanianSparseGrid::setAnisotropicRefinement
   TasmanianSparseGrid::estimateAnisotropicCoefficients
   TasmanianSparseGrid::setSurplusRefinement
   TasmanianSparseGrid::setSurplusRefinement
  All functions accept an output that specifies which output to be used
  Sequence, Local Polynomial, and Wavelet grids can now refine based on a specified output as opposed to all output
  to regain the old behavior use output = -1



Changelog for version 3.0:

- WARNING: grids saved with the old version of the library are incompatible with the new version (due to the new and more efficient data structures)
- overall the new version of the library is faster and more memory efficient
- added a new anisotropic refinement strategy for global grids
- to achieve this, we have made numerous changes to the interface, see the updated manual
- fixed several bugs, the library works more smootly now
- added more sanity checking of the inputs, error messages are more informative now

Notable changes to the interface:

- the depth parameter accross all interfaces in all grid types now counts from zero, i.e., 

Old:  grid.makeGlobalGrid( dim, out, 1, type_level, ... )
New:  grid.makeGlobalGrid( dim, out, 0, type_level, ... )

Old:  grid.makeLocalPolynomialGrid( dim, out, 5 ... )
New:  grid.makeLocalPolynomialGrid( dim, out, 4 ... )

- types iexact and qexact are renamed to iptotal and qptotal, when depth is combined with those types the new value remains the same, i.e.,

Old:  grid.makeGlobalGrid( dim, out, 1, type_iexact, ... )
New:  grid.makeGlobalGrid( dim, out, 1, type_iptotal, ... )

- the points in the R-Leja sequence now start as 1, -1, 0 ...



